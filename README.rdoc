= HUMAN STEM CELL GENOMICS PORTAL README

== SETUP

This application is built and deployed using Docker[https://www.docker.com], specifically native {Docker for Mac OSX}[https://docs.docker.com/docker-for-mac/].
Please refer to their online documentation for instructions on installing and creating a default VM for managing Docker images.

== BUILDING THE DOCKER IMAGE

Once all source files are checked out and Docker has been installed and your VM configured, open a terminal window and execute the following steps:

1. Navigate to the project directory
2. Build the HSCGP Portal image: <code>docker build -t hscgp_portal_docker -f Dockerfile .</code>

This will start the automated process of building the Docker image for running the portal.  The image is built off of the {Passenger-docker baseimage}[https://github.com/phusion/passenger-docker] and comes with Ruby, Nginx, and Passenger by default, with additional packages added to the {Broad Institute KDUX Rails baseimage}[https://hub.docker.com/r/broadinstitute/kdux-rails-baseimage/] which pulls from the original baseimage.  The extended image contains Oracle Instant Client, ImageMagick, and Sphinx Search.

<em>If this is your first time building the image, it may take several minutes to download and install everything.</em>

== BEFORE RUNNING THE CONTAINER

Since this project utilizes native Docker for Mac OSX, any resources on the host machine cannot be reached by the running container (specifically, any database resources).
Therefore, we will need to deploy a database container using Docker as well.  This project uses {MongoDB}[https://hub.docker.com/_/mongo/] as the primary datastore.

First, create a directory somewhere on your computer in which to store the raw database content (it doesn't matter where as long as it has rw permissions, but preferably it would be inside your home directory).

To deploy the database container:

1. Pull the image: <code>docker pull mongo</code>
2. Navigate to the project directory
3. Run the helper script to start the DB container: <code>bin/boot_mongo -d (path to data store directory) </code>

Note: Once the container has been run once, you can stop & restart it using: <code>docker stop mongodb</code> or <code>docker restart mongodb</code>

== RUNNING THE CONTAINER

Once the image has successfully built and the database container is running, use the following command to start the container:
  bin/boot_docker -u (sendgrid username) -P (sendgrid password) -j (JWT shared secret)

<em>Contact dmeyer@broadinstitute.org[mailto:dmeyer@broadinstitute.org] for credentials to use in development and production.</em>

This sets up several environment variables in your shell and then runs the following command:
  docker run --rm -it --name $CONTAINER_NAME -p 80:80 -p 443:443 --link mongodb:mongodb -p 587:587 -h localhost -v $PROJECT_DIR:/home/app/webapp:rw -e PASSENGER_APP_ENV=$PASSENGER_APP_ENV -e MONGO_LOCALHOST=$MONGO_LOCALHOST -e SENDGRID_USERNAME=$SENDGRID_USERNAME -e SENDGRID_PASSWORD=$SENDGRID_PASSWORD -e SECRET_KEY_BASE=$SECRET_KEY_BASE -e JWT_SECRET=$JWT_SECRET -e IGV_URL=$IGV_URL hscgp_portal_docker
The container will then start running, and will execute its local startup scripts that will configure the application automatically.

You can also run the <code>bin/boot_docker</code> script in help mode by passing <code>-H</code> to print the help text which will show you how to pass specific values to the above env variables.
<em>Note: running the shortcut script with an environment of 'production' will cause the container to spawn headlessly by passing the <code>-d</code> flag, rather than <code>--rm -it</code>.</em>

=== DOCKER RUN COMMAND ENVIRONMENT VARIABLES
There are several variables that need to be passed to the Docker container in order to run properly:
1. *CONTAINER_NAME* (passed with --name): This names your container to whatever you want.  This is useful when linking containers.
3. *PROJECT_DIR* (passed with -v): This mounts your local working directory inside the Docker container.  Makes doing local development via hot deployment possible.
4. *PASSENGER_APP_ENV* (passed with -e): The Rails environment you wish to load.  Can be either development or production (default is development).
5. *MONGO_LOCALHOST* (passed with -e): Name of the container running MongoDB.  Even though our two containers are linked, this needs to be set to allow Rails to communicate with the database.
6. *SENDGRID_USERNAME* (passed with -e): The username associated with the Sendgrid account (for sending emails).
7. *SENDGRID_PASSWORD* (passed with -e): The password associated with the Sendgrid account (for sending emails).
8. *SECRET_KEY_BASE* (passed with -e): Sets the Rails SECRET_KEY_BASE environment variable, used mostly by Devise in authentication for cookies.
8. *JWT_SECRET* (passed with -e): Sets the JWT[https://github.com/jwt/ruby-jwt] shared secret.  Used for creating JWT tokens for authenticating requests to the IGV BAM file server.
8. *IGV_URL* (passed with -e): Sets the URL for the IGV BAM file server.  Defaults to hesc-igv.broadinstitute.org.

=== RUN COMMAND IN DETAIL
The run command explained in its entirety:
* *--rm:* This tells Docker to automatically clean up the container after exiting.
* *-it:* Leaves an interactive shell running in the foreground where the output of Nginx can be seen.
* <b>--name CONTAINER_NAME:</b> This names your container to whatever you want.  This is useful when linking other Docker containers to the portal container, or when connecting to a running container to check logs or environment variables.
* <b>-p 80:80 -p 443:443 -p 587:587:</b> Maps ports 80 (HTTP), 443 (HTTPS), and 587 (smtp) on the host machine to the corresponding ports inside the Docker container.
* <b>--link mongodb:mongodb</b>: Connects our webapp container to the mongodb container, creating a virtual hostname inside the hscgp_portal_docker container called mongodb.
* <b>-v [PROJECT_DIR]/:/home/app/webapp:</b> This mounts your local working directory inside the running Docker container in the correct location for the portal to run.  This accomplishes two things:
  - Enables hot deployment for local development
  - Persists all project data past destruction of Docker container (since we're running with --rm), but not system-level log or tmp files.
* <b>-e PASSENGER_APP_ENV= [RAILS_ENV]:</b> The Rails environment.  Will default to development, so if you're doing a production deployment, set this accordingly.
* <b>-e MONGO_LOCALHOST= [MONGO_LOCALHOST]:</b> Name of the container running MongoDB.  Even though our two containers are linked, this needs to be set to allow Rails to communicate with the database.
* <b>-e SENDGRID_USERNAME= [SENDGRID_USERNAME] -e SENDGRID_PASSWORD= [SENDGRID_PASSWORD]:</b> The credentials for Sendgrid to send emails.  Alternatively, you could decide to not use Sendgrid and configure the application to use a different SMTP server (would be done inside your environment's config file).
* <b>-e SECRET_KEY_BASE= [SECRET_KEY_BASE]:</b> Setting the SECRET_KEY_BASE variable is necessary for creating secure cookies for authentication.  This variable automatically resets every time we restart the container.
* *hscgp_portal_docker*: This is the name of the image we created earlier.  If you chose a different name, please use that here.

=== PRODUCTION DEPLOYMENT
The production HSCGP portal is deployed in on a Broad Institute docker VM call <code>hscgp</code>.  You can ssh to it from inside the Broad network.  The production database is a hosted Broad mongo instance called <code>scpp-mongo</code>.  The schema name is <code>hscgp_portal_production</code> running under the user <code>hscgp_portal</code>.

Once you have connected, the portal is running in this directory: <code>/home/unix/kdux/hscgp_portal</code>.  All source files are owned by <code>kdux</code>, so if you need to pull from git, make sure you <code>sudo -u kdux -s</code> first to preserve the correct file permissions.  Any docker commands need to be run via <code>sudo</code>.

The production URL is: https://hscgp.broadinstitute.org/hscgp

==== PRODUCTION DOCKER COMMANDS

* To bounce the portal: <code>sudo docker restart hscgp_portal</code>
* To connect to the running portal container: <code>sudo docker exec -it hscgp_portal bash</code>

If you have pulled changes from source that require re-building the container, follow this checklist from inside the project directory as <code>root</code>:
1. Rebuild the docker image: <code>sudo docker build -t hscgp_portal_docker -f Dockerfile .</code>
2. Stop the portal: <code>sudo docker stop hscgp_portal</code>
3. Remove the container instance: <code>sudo docker rm hscgp_portal</code>
4. Launch a new instance of the portal with the updated container:
  bin/boot_docker -e production -u (sendgrid username) -P (sendgrid password) -p (prod db password) -j (JWT shared secret)

<em>Contact dmeyer@broadinstitute.org[mailto:dmeyer@broadinstitute.org] for credentials to use with production</em>

<b>You will need to rebuild the docker image if you do any of the following:</b>
* Edit the Dockerfile
* Edit any scripts or configuration files listed in the Dockerfile:
  - Gemfile (including Gemfile.lock if versions have changed)
  - set_user_permissions.bash
  - rails_startup.bash
  - nginx.conf
  - webapp.conf

When you launch a new instance of the portal, you should get a response that is looks like a giant hexadecimal string - this is the instance ID of the new container.
Once the container is running, you can connect to it with the docker exec command and perform various Rails-specific actions, like:

* Re-index the database: <code>bin/rake RAILS_ENV=production db:mongoid:create_indexes</code>
* Launch the Rails console (to inspect database records, for instance): <code>bin/rails console production</code>

== TESTS

=== SETUP

All user interface tests are handle through {Selenium Webdriver}[http://www.seleniumhq.org/docs/03_webdriver.jsp] and Chromedriver[https://sites.google.com/a/chromium.org/chromedriver/]
and are run against a regular instance of the portal, usually in development mode.  The test suite is run from the
<code>test/integration/ui_functionality_test.rb</code> script.

Due to the nature of Docker, the tests cannot be run from inside the container as the Docker container cannot connect back to Chromedriver
and the display from inside the VM.  As a result, the UI test suite has no knowledge of the Rails environment or application stack.
Therefore, you will need to have a minimal portal environment enabled outside of Docker. The minumum requirements are as follows:

* Ruby 2.3 or greater, preferably mangaged through RVM[https://rvm.io/] or rbenv[https://github.com/rbenv/rbenv]
* Gems: rubygems[https://github.com/rubygems/rubygems], test-unit[http://test-unit.github.io], selenium-webdriver[https://github.com/SeleniumHQ/selenium/tree/master/rb] (see Gemfile.lock for version requirements)
* Google Chrome
* Chromedriver

The test suite requires a test user email to have been created first.  Details for this user account can be found in the
<code>setup</code> method of <code>test/integration/ui_functionality_test.rb</code>.  This user can be added normally through the
UI, or directly in the Rails console.

=== RUNNING TESTS

To run the UI regression test, open a terminal window, navigate to the project directory, and then run

  ruby test/integration/ui_functionality_test.rb
